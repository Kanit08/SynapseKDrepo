{
	"name": "unionanddistinct",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkkdspool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d67fa6dd-4cb0-464a-8256-aa678182ca2f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c853d123-c274-4d76-8290-e704c4a8dd26/resourceGroups/AzurePracticeRG/providers/Microsoft.Synapse/workspaces/azurekdsynapsespark/bigDataPools/sparkkdspool",
				"name": "sparkkdspool",
				"type": "Spark",
				"endpoint": "https://azurekdsynapsespark.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkkdspool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"data1=[(1,\"kanit\",'M',1000),(2,\"Dev\",'F',2000),(3,\"Ani\",'M',3000),(4,\"Ankit\",'M',4000)]\r\n",
					"schema1=[\"id\",\"name\",'gender','salary']\r\n",
					"data2=[(1,\"Hari\",'M',1000),(2,\"meera\",'F',2000),(3,\"Anil\",'M',3000),(4,\"tarun\",'M',4000),\\\r\n",
					"        (4,\"Ankit\",'M',4000)]\r\n",
					"schema2=[\"id\",\"name\",'gender','salary']\r\n",
					"df1=spark.createDataFrame(data=data1,schema=schema1)\r\n",
					"df1.show()\r\n",
					"df2=spark.createDataFrame(data=data2,schema=schema2)\r\n",
					"df2.show()\r\n",
					"uniondf=df1.union(df2)\r\n",
					"uniondf.show()\r\n",
					"uniondf.distinct().show()"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"data1=[(1,\"kanit\",'M',1000),(2,\"Dev\",'F',2000),(3,\"Ani\",'M',3000),(4,\"Ankit\",'M',4000)]\r\n",
					"schema1=[\"id\",\"name\",'gender','salary']\r\n",
					"data2=[(1,\"Hari\",'M',20),(2,\"meera\",'F',25),(3,\"Anil\",'M',30),(4,\"tarun\",'M',40),\\\r\n",
					"        (4,\"Ankit\",'M',45)]\r\n",
					"schema2=[\"id\",\"name\",'gender','age']\r\n",
					"df1=spark.createDataFrame(data=data1,schema=schema1)\r\n",
					"df1.show()\r\n",
					"df2=spark.createDataFrame(data=data2,schema=schema2)\r\n",
					"df2.show()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"uniondf=df1.unionByName(df2,allowMissingColumns=True).show()"
				],
				"execution_count": 4
			}
		]
	}
}